{"version":3,"sources":["Recorder.js","App.js","serviceWorker.js","index.js"],"names":["Recorder","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startRecording","setState","record","stopRecording","state","recordedBlob","console","log","saveAs","blob","react_default","a","createElement","lib","className","onStop","onData","strokeColor","backgroundColor","onClick","type","React","Component","document","title","App","Recorder_Recorder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAMqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,eAAiB,WACfP,EAAKQ,SAAS,CACZC,QAAQ,KAVOT,EAcnBU,cAAgB,WACdV,EAAKQ,SAAS,CACZC,QAAQ,KAdVT,EAAKW,MAAQ,CACXF,QAAQ,GAHOT,sEAoBZY,GACLC,QAAQC,IAAI,+BAAgCF,kCAGvCA,GACLC,QAAQC,IAAI,oBAAqBF,GAEhCG,IAAOH,EAAaI,KAAM,gDAoB3B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,SAAD,CACEX,OAAQN,KAAKQ,MAAMF,OACnBY,UAAU,aACVC,OAAQnB,KAAKmB,OACbC,OAAQpB,KAAKoB,OACbC,YAAY,UACZC,gBAAgB,YAChBR,EAAAC,EAAAC,cAAA,SACFF,EAAAC,EAAAC,cAAA,UAAQO,QAASvB,KAAKI,eAAgBoB,KAAK,UAA3C,SACAV,EAAAC,EAAAC,cAAA,UAAQO,QAASvB,KAAKO,cAAeiB,KAAK,UAA1C,iBA3D8BC,IAAMC,iBCH5CC,SAASC,MAAQ,qBAyBFC,mLAtBX,OAEEf,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,oBACSF,EAAAC,EAAAC,cAAA,2BAETF,EAAAC,EAAAC,cAAA,WAMAF,EAAAC,EAAAC,cAAA,8CAEAF,EAAAC,EAAAC,cAACc,EAAD,eAjBQJ,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASX,SAASY,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.74a3efe1.chunk.js","sourcesContent":["import React from 'react';\nimport { ReactMic } from 'react-mic';\nimport saveAs from 'file-saver';\n\n\n\nexport default class Recorder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      record: false\n    }\n\n  }\n\n  startRecording = () => {\n    this.setState({\n      record: true\n    });\n  }\n\n  stopRecording = () => {\n    this.setState({\n      record: false\n    });\n  }\n\n  onData(recordedBlob) {\n    console.log('chunk of real-time data is: ', recordedBlob);\n  }\n\n  onStop(recordedBlob) {\n    console.log('recordedBlob is: ', recordedBlob);\n\n     saveAs(recordedBlob.blob, \"test-aa.ogg\");\n\n    // var formData = new FormData();\n\n    // formData.append('file', recordedBlob.blob);\n    \n    // fetch('http://127.0.0.1:5000/process', {\n    //   method: 'POST',\n    //   body: formData,\n    //   headers: {\n    //     \"Content-Type\": \"multipart/form-data\",\n    //   }\n    // })\n    // .then(response => response.json())\n    // .catch(error => console.error('Error:', error))\n    // .then(response => console.log('Success:', JSON.stringify(response)));\n\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactMic\n          record={this.state.record}\n          className=\"sound-wave\"\n          onStop={this.onStop}\n          onData={this.onData}\n          strokeColor=\"#000000\"\n          backgroundColor=\"#FF4081\" />\n          <p>\n        <button onClick={this.startRecording} type=\"button\">Start</button>\n        <button onClick={this.stopRecording} type=\"button\">Stop</button>\n        </p>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Recorder from './Recorder';\nimport './App.css';\ndocument.title = \"Nu am inteles!\"\nclass App extends Component {\n  render() {\n    return (\n      \n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            Scuze, <b>nu am inteles</b>\n          </h1>\n          <br>\n\n\n\n          \n          </br>\n          <p>Transcriere audio in limba romana</p>\n          \n          <Recorder />          \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}